NW_sand_ini <- incidence_matrix_from_raw_data(data_sand_ini) %>% as.data.frame(.)
num_plants_sand_ini <- nrow(NW_sand_ini)   # number of rows
num_animals_sand_ini <- ncol(NW_sand_ini)  # number of columns
print(paste0("sand_initial # rows ", num_plants_sand_ini))
print(paste0("sand_initial # columns ", num_animals_sand_ini))
RND_sand_ini  <- remove_plants(NW_sand_ini, iter, removal_strategy)
save(RND_sand_ini,file = paste0(path_to_networks_data, "RND_sand_ini.RData"))
#
NW_sand_inter <- incidence_matrix_from_raw_data(data_sand_inter) %>% as.data.frame(.)
num_plants_sand_inter <- nrow(NW_sand_inter)   # number of rows
num_animals_sand_inter <- ncol(NW_sand_inter)  # number of columns
print(paste0("sand_initial # rows ", num_plants_sand_inter))
print(paste0("sand_initial # columns ", num_animals_sand_inter))
RND_sand_inter  <- remove_plants(NW_sand_inter, iter, removal_strategy)
save(RND_sand_inter,file = paste0(path_to_networks_data, "RND_sand_inter.RData"))
#
NW_sand_adv <- incidence_matrix_from_raw_data(data_sand_adv) %>% as.data.frame(.)
num_plants_sand_adv <- nrow(NW_sand_adv)   # number of rows
num_animals_sand_adv <- ncol(NW_sand_adv)  # number of columns
print(paste0("sand_initial # rows ", num_plants_sand_adv))
print(paste0("sand_initial # columns ", num_animals_sand_adv))
RND_sand_adv  <- remove_plants(NW_sand_adv, iter, removal_strategy)
save(RND_sand_adv,file = paste0(path_to_networks_data, "RND_sand_adv.RData"))
# ----------- removal from least connected to most connected LTM ------------
removal_strategy = "LTM"
LTM_pristine <- remove_plants(NW_pristine, iter, removal_strategy)
save(LTM_pristine,file = paste0(path_to_networks_data, "LTM_pristine.RData"))
#
LTM_sand_ini  <- remove_plants(NW_sand_ini, iter, removal_strategy)
save(LTM_sand_ini,file = paste0(path_to_networks_data, "LTM_sand_ini.RData"))
#
LTM_sand_inter  <- remove_plants(NW_sand_inter, iter, removal_strategy)
save(LTM_sand_inter,file = paste0(path_to_networks_data, "LTM_sand_inter.RData"))
#
LTM_sand_adv  <- remove_plants(NW_sand_adv, iter, removal_strategy)
save(LTM_sand_adv,file = paste0(path_to_networks_data, "LTM_sand_adv.RData"))
# ----------- removal from most connected to least connected MTL ------------
removal_strategy = "MTL"
MTL_pristine <- remove_plants(NW_pristine, iter, removal_strategy)
save(MTL_pristine,file = paste0(path_to_networks_data, "MTL_pristine.RData"))
#
MTL_sand_ini  <- remove_plants(NW_sand_ini, iter, removal_strategy)
save(MTL_sand_ini,file = paste0(path_to_networks_data, "MTL_sand_ini.RData"))
#
MTL_sand_inter  <- remove_plants(NW_sand_inter, iter, removal_strategy)
save(MTL_sand_inter,file = paste0(path_to_networks_data, "MTL_sand_inter.RData"))
#
MTL_sand_adv  <- remove_plants(NW_sand_adv, iter, removal_strategy)
save(MTL_sand_adv,file = paste0(path_to_networks_data, "MTL_sand_adv.RData"))
data_pristine <- filter_raw_data(data,"Mine_type","control") %>% filter_raw_data(.,"Stage","pristine")
dim(data_pristine)
data = read.csv("Interactions_data.csv",sep = ";")
path_to_networks_data = "./Simulation_results/"
devtools::install_github("bascomptelab/ecological_network_tools/robustness",ref = "raw_data")
library(robustness)
devtools::install_github("bascomptelab/ecological_network_tools/transformrawdata",ref = "raw_data")
library(transformrawdata)
data_pristine <- filter_raw_data(data,"Mine_type","control") %>% filter_raw_data(.,"Stage","pristine")
dim(data_pristine)
data_pristine <- filter_raw_data(data,"Mine_type","control") %>% filter_raw_data(.,"Stage","pristine")
require(plyr)
# Read data into R.
# Note that this file separates columns with ";".
# Thus, we sepecify the separator when calling the read.csv function
data = read.csv("Interactions_data.csv",sep = ";")
path_to_networks_data = "./Simulation_results/"
devtools::install_github("bascomptelab/ecological_network_tools/robustness",ref = "raw_data")
library(robustness)
devtools::install_github("bascomptelab/ecological_network_tools/transformrawdata",ref = "raw_data")
library(transformrawdata)
data_pristine <- filter_raw_data(data,"Mine_type","control") %>% filter_raw_data(.,"Stage","pristine")
library(dplyr)
require(plyr)
remove.packages(c("formattable", "igraph","tidyverse","data.table","repr","imager","dplyr","latex2exp"))
require(dplyr)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
setwd("~/Documents/UZH_icloud/tutorial_project/test_Rafael")
require(dplyr)
data = read.csv("Interactions_data.csv",sep = ";")
path_to_networks_data = "./Simulation_results/"
devtools::install_github("bascomptelab/ecological_network_tools/robustness",ref = "raw_data")
library(robustness)
devtools::install_github("bascomptelab/ecological_network_tools/transformrawdata",ref = "raw_data")
library(transformrawdata)
# two filters are actually redundat in this case
data_pristine <- filter_raw_data(data,"Mine_type","control") %>% filter_raw_data(.,"Stage","pristine")
dim(data_pristine)
data_sand_ini <- filter_raw_data(data,"Mine_type","sand") %>% filter_raw_data(.,"Stage","ini")
dim(data_sand_ini)
data_sand_inter <- filter_raw_data(data,"Mine_type","sand") %>% filter_raw_data(.,"Stage","inter")
dim(data_sand_inter)
data_sand_adv <- filter_raw_data(data,"Mine_type","sand") %>% filter_raw_data(.,"Stage","adv")
dim(data_sand_adv)
# simulate removal of plants
iter = 20 # number of iterations: the order of plants removal is randomized to compute the averaged secondary extinction curve
# ----------- random removal of plants RND ------------
removal_strategy = "RND" # "LTM" "MTL"
NW_pristine <- incidence_matrix_from_raw_data(data_pristine) %>% as.data.frame(.)
num_plants_pristine <- nrow(NW_pristine)   # number of rows
num_animals_pristine <- ncol(NW_pristine)  # number of columns
print(paste0("prinstine # rows ", num_plants_pristine))
print(paste0("prinstine # columns ", num_animals_pristine))
RND_pristine <- remove_plants(NW_pristine, iter, removal_strategy)
save(RND_pristine,file = paste0(path_to_networks_data, "RND_pristine.RData"))
#
NW_sand_ini <- incidence_matrix_from_raw_data(data_sand_ini) %>% as.data.frame(.)
num_plants_sand_ini <- nrow(NW_sand_ini)   # number of rows
num_animals_sand_ini <- ncol(NW_sand_ini)  # number of columns
print(paste0("sand_initial # rows ", num_plants_sand_ini))
print(paste0("sand_initial # columns ", num_animals_sand_ini))
RND_sand_ini  <- remove_plants(NW_sand_ini, iter, removal_strategy)
save(RND_sand_ini,file = paste0(path_to_networks_data, "RND_sand_ini.RData"))
#
NW_sand_inter <- incidence_matrix_from_raw_data(data_sand_inter) %>% as.data.frame(.)
num_plants_sand_inter <- nrow(NW_sand_inter)   # number of rows
num_animals_sand_inter <- ncol(NW_sand_inter)  # number of columns
print(paste0("sand_initial # rows ", num_plants_sand_inter))
print(paste0("sand_initial # columns ", num_animals_sand_inter))
RND_sand_inter  <- remove_plants(NW_sand_inter, iter, removal_strategy)
save(RND_sand_inter,file = paste0(path_to_networks_data, "RND_sand_inter.RData"))
#
NW_sand_adv <- incidence_matrix_from_raw_data(data_sand_adv) %>% as.data.frame(.)
num_plants_sand_adv <- nrow(NW_sand_adv)   # number of rows
num_animals_sand_adv <- ncol(NW_sand_adv)  # number of columns
print(paste0("sand_initial # rows ", num_plants_sand_adv))
print(paste0("sand_initial # columns ", num_animals_sand_adv))
RND_sand_adv  <- remove_plants(NW_sand_adv, iter, removal_strategy)
save(RND_sand_adv,file = paste0(path_to_networks_data, "RND_sand_adv.RData"))
# ----------- removal from least connected to most connected LTM ------------
removal_strategy = "LTM"
LTM_pristine <- remove_plants(NW_pristine, iter, removal_strategy)
save(LTM_pristine,file = paste0(path_to_networks_data, "LTM_pristine.RData"))
#
LTM_sand_ini  <- remove_plants(NW_sand_ini, iter, removal_strategy)
save(LTM_sand_ini,file = paste0(path_to_networks_data, "LTM_sand_ini.RData"))
#
LTM_sand_inter  <- remove_plants(NW_sand_inter, iter, removal_strategy)
save(LTM_sand_inter,file = paste0(path_to_networks_data, "LTM_sand_inter.RData"))
#
LTM_sand_adv  <- remove_plants(NW_sand_adv, iter, removal_strategy)
save(LTM_sand_adv,file = paste0(path_to_networks_data, "LTM_sand_adv.RData"))
# ----------- removal from most connected to least connected MTL ------------
removal_strategy = "MTL"
MTL_pristine <- remove_plants(NW_pristine, iter, removal_strategy)
save(MTL_pristine,file = paste0(path_to_networks_data, "MTL_pristine.RData"))
#
MTL_sand_ini  <- remove_plants(NW_sand_ini, iter, removal_strategy)
save(MTL_sand_ini,file = paste0(path_to_networks_data, "MTL_sand_ini.RData"))
#
MTL_sand_inter  <- remove_plants(NW_sand_inter, iter, removal_strategy)
save(MTL_sand_inter,file = paste0(path_to_networks_data, "MTL_sand_inter.RData"))
#
MTL_sand_adv  <- remove_plants(NW_sand_adv, iter, removal_strategy)
save(MTL_sand_adv,file = paste0(path_to_networks_data, "MTL_sand_adv.RData"))
install.packages("permute")
# require(formattable)
# require(igraph)
#
# library("tidyverse")
# library("data.table")
# library("repr")
# library(imager)
# library(dplyr)
# library(latex2exp)
# library(knitr)
# require(ggplot2)
# require(reshape2)
# require(permute)
# remove.packages(c("formattable", "igraph","tidyverse","data.table","repr","imager","dplyr","latex2exp"))
# remove.packages(c("knitr","ggplot2","reshape2","permute"))
# remove.packages(c("robustness","transformrawdata"))
# library(dplyr)
require(dplyr)
# Read data into R.
# Note that this file separates columns with ";".
# Thus, we sepecify the separator when calling the read.csv function
data = read.csv("Interactions_data.csv",sep = ";")
path_to_networks_data = "./Simulation_results/"
devtools::install_github("bascomptelab/ecological_network_tools/robustness",ref = "raw_data")
library(robustness)
devtools::install_github("bascomptelab/ecological_network_tools/transformrawdata",ref = "raw_data")
library(transformrawdata)
### Function to filter data
# two filters are actually redundat in this case
data_pristine <- filter_raw_data(data,"Mine_type","control") %>% filter_raw_data(.,"Stage","pristine")
dim(data_pristine)
# require(formattable)
# require(igraph)
#
# library("tidyverse")
# library("data.table")
# library("repr")
# library(imager)
# library(dplyr)
# library(latex2exp)
# library(knitr)
# require(ggplot2)
# require(reshape2)
# require(permute)
# remove.packages(c("formattable", "igraph","tidyverse","data.table","repr","imager","dplyr","latex2exp"))
# remove.packages(c("knitr","ggplot2","reshape2","permute"))
# remove.packages(c("robustness","transformrawdata"))
# library(dplyr)
require(dplyr)
# Read data into R.
# Note that this file separates columns with ";".
# Thus, we sepecify the separator when calling the read.csv function
data = read.csv("Interactions_data.csv",sep = ";")
path_to_networks_data = "./Simulation_results/"
devtools::install_github("bascomptelab/ecological_network_tools/robustness",ref = "raw_data")
library(robustness)
devtools::install_github("bascomptelab/ecological_network_tools/transformrawdata",ref = "raw_data")
library(transformrawdata)
### Function to filter data
# two filters are actually redundat in this case
data_pristine <- filter_raw_data(data,"Mine_type","control") %>% filter_raw_data(.,"Stage","pristine")
dim(data_pristine)
rm(list = ls())
# require(formattable)
# require(igraph)
#
# library("tidyverse")
# library("data.table")
# library("repr")
# library(imager)
# library(dplyr)
# library(latex2exp)
# library(knitr)
# require(ggplot2)
# require(reshape2)
# require(permute)
# remove.packages(c("formattable", "igraph","tidyverse","data.table","repr","imager","dplyr","latex2exp"))
# remove.packages(c("knitr","ggplot2","reshape2","permute"))
# remove.packages(c("robustness","transformrawdata"))
require(dplyr)
# Read data into R.
# Note that this file separates columns with ";".
# Thus, we sepecify the separator when calling the read.csv function
data = read.csv("Interactions_data.csv",sep = ";")
path_to_networks_data = "./Simulation_results/"
devtools::install_github("bascomptelab/ecological_network_tools/robustness",ref = "raw_data")
library(robustness)
devtools::install_github("bascomptelab/ecological_network_tools/transformrawdata",ref = "raw_data")
library(transformrawdata)
### Function to filter data
# two filters are actually redundat in this case
data_pristine <- filter_raw_data(data,"Mine_type","control") %>% filter_raw_data(.,"Stage","pristine")
dim(data_pristine)
data_sand_ini <- filter_raw_data(data,"Mine_type","sand") %>% filter_raw_data(.,"Stage","ini")
dim(data_sand_ini)
data_sand_inter <- filter_raw_data(data,"Mine_type","sand") %>% filter_raw_data(.,"Stage","inter")
dim(data_sand_inter)
data_sand_adv <- filter_raw_data(data,"Mine_type","sand") %>% filter_raw_data(.,"Stage","adv")
dim(data_sand_adv)
# simulate removal of plants
iter = 20 # number of iterations: the order of plants removal is randomized to compute the averaged secondary extinction curve
# ----------- random removal of plants RND ------------
removal_strategy = "RND" # "LTM" "MTL"
NW_pristine <- incidence_matrix_from_raw_data(data_pristine) %>% as.data.frame(.)
num_plants_pristine <- nrow(NW_pristine)   # number of rows
num_animals_pristine <- ncol(NW_pristine)  # number of columns
print(paste0("prinstine # rows ", num_plants_pristine))
print(paste0("prinstine # columns ", num_animals_pristine))
RND_pristine <- remove_plants(NW_pristine, iter, removal_strategy)
save(RND_pristine,file = paste0(path_to_networks_data, "RND_pristine.RData"))
#
NW_sand_ini <- incidence_matrix_from_raw_data(data_sand_ini) %>% as.data.frame(.)
num_plants_sand_ini <- nrow(NW_sand_ini)   # number of rows
num_animals_sand_ini <- ncol(NW_sand_ini)  # number of columns
print(paste0("sand_initial # rows ", num_plants_sand_ini))
print(paste0("sand_initial # columns ", num_animals_sand_ini))
RND_sand_ini  <- remove_plants(NW_sand_ini, iter, removal_strategy)
save(RND_sand_ini,file = paste0(path_to_networks_data, "RND_sand_ini.RData"))
#
NW_sand_inter <- incidence_matrix_from_raw_data(data_sand_inter) %>% as.data.frame(.)
num_plants_sand_inter <- nrow(NW_sand_inter)   # number of rows
num_animals_sand_inter <- ncol(NW_sand_inter)  # number of columns
print(paste0("sand_initial # rows ", num_plants_sand_inter))
print(paste0("sand_initial # columns ", num_animals_sand_inter))
RND_sand_inter  <- remove_plants(NW_sand_inter, iter, removal_strategy)
save(RND_sand_inter,file = paste0(path_to_networks_data, "RND_sand_inter.RData"))
#
NW_sand_adv <- incidence_matrix_from_raw_data(data_sand_adv) %>% as.data.frame(.)
num_plants_sand_adv <- nrow(NW_sand_adv)   # number of rows
num_animals_sand_adv <- ncol(NW_sand_adv)  # number of columns
print(paste0("sand_initial # rows ", num_plants_sand_adv))
print(paste0("sand_initial # columns ", num_animals_sand_adv))
RND_sand_adv  <- remove_plants(NW_sand_adv, iter, removal_strategy)
save(RND_sand_adv,file = paste0(path_to_networks_data, "RND_sand_adv.RData"))
# ----------- removal from least connected to most connected LTM ------------
removal_strategy = "LTM"
LTM_pristine <- remove_plants(NW_pristine, iter, removal_strategy)
save(LTM_pristine,file = paste0(path_to_networks_data, "LTM_pristine.RData"))
#
LTM_sand_ini  <- remove_plants(NW_sand_ini, iter, removal_strategy)
save(LTM_sand_ini,file = paste0(path_to_networks_data, "LTM_sand_ini.RData"))
#
LTM_sand_inter  <- remove_plants(NW_sand_inter, iter, removal_strategy)
save(LTM_sand_inter,file = paste0(path_to_networks_data, "LTM_sand_inter.RData"))
#
LTM_sand_adv  <- remove_plants(NW_sand_adv, iter, removal_strategy)
save(LTM_sand_adv,file = paste0(path_to_networks_data, "LTM_sand_adv.RData"))
# ----------- removal from most connected to least connected MTL ------------
removal_strategy = "MTL"
MTL_pristine <- remove_plants(NW_pristine, iter, removal_strategy)
save(MTL_pristine,file = paste0(path_to_networks_data, "MTL_pristine.RData"))
#
MTL_sand_ini  <- remove_plants(NW_sand_ini, iter, removal_strategy)
save(MTL_sand_ini,file = paste0(path_to_networks_data, "MTL_sand_ini.RData"))
#
MTL_sand_inter  <- remove_plants(NW_sand_inter, iter, removal_strategy)
save(MTL_sand_inter,file = paste0(path_to_networks_data, "MTL_sand_inter.RData"))
#
MTL_sand_adv  <- remove_plants(NW_sand_adv, iter, removal_strategy)
save(MTL_sand_adv,file = paste0(path_to_networks_data, "MTL_sand_adv.RData"))
install.packages("igraph")
# remove.packages(c("formattable", "igraph","tidyverse","data.table","repr","imager","dplyr","latex2exp"))
# remove.packages(c("knitr","ggplot2","reshape2","permute"))
remove.packages(c("robustness","transformrawdata"))
require(dplyr)
# Read data into R.
# Note that this file separates columns with ";".
# Thus, we sepecify the separator when calling the read.csv function
data = read.csv("Interactions_data.csv",sep = ";")
path_to_networks_data = "./Simulation_results/"
devtools::install_github("bascomptelab/ecological_network_tools/robustness",ref = "raw_data")
library(robustness)
devtools::install_github("bascomptelab/ecological_network_tools/transformrawdata",ref = "raw_data")
library(transformrawdata)
### Function to filter data
# two filters are actually redundat in this case
data_pristine <- filter_raw_data(data,"Mine_type","control") %>% filter_raw_data(.,"Stage","pristine")
dim(data_pristine)
data_sand_ini <- filter_raw_data(data,"Mine_type","sand") %>% filter_raw_data(.,"Stage","ini")
dim(data_sand_ini)
data_sand_inter <- filter_raw_data(data,"Mine_type","sand") %>% filter_raw_data(.,"Stage","inter")
dim(data_sand_inter)
data_sand_adv <- filter_raw_data(data,"Mine_type","sand") %>% filter_raw_data(.,"Stage","adv")
dim(data_sand_adv)
# simulate removal of plants
iter = 20 # number of iterations: the order of plants removal is randomized to compute the averaged secondary extinction curve
# ----------- random removal of plants RND ------------
removal_strategy = "RND" # "LTM" "MTL"
NW_pristine <- incidence_matrix_from_raw_data(data_pristine) %>% as.data.frame(.)
num_plants_pristine <- nrow(NW_pristine)   # number of rows
num_animals_pristine <- ncol(NW_pristine)  # number of columns
print(paste0("prinstine # rows ", num_plants_pristine))
print(paste0("prinstine # columns ", num_animals_pristine))
RND_pristine <- remove_plants(NW_pristine, iter, removal_strategy)
save(RND_pristine,file = paste0(path_to_networks_data, "RND_pristine.RData"))
#
NW_sand_ini <- incidence_matrix_from_raw_data(data_sand_ini) %>% as.data.frame(.)
num_plants_sand_ini <- nrow(NW_sand_ini)   # number of rows
num_animals_sand_ini <- ncol(NW_sand_ini)  # number of columns
print(paste0("sand_initial # rows ", num_plants_sand_ini))
print(paste0("sand_initial # columns ", num_animals_sand_ini))
RND_sand_ini  <- remove_plants(NW_sand_ini, iter, removal_strategy)
save(RND_sand_ini,file = paste0(path_to_networks_data, "RND_sand_ini.RData"))
#
NW_sand_inter <- incidence_matrix_from_raw_data(data_sand_inter) %>% as.data.frame(.)
num_plants_sand_inter <- nrow(NW_sand_inter)   # number of rows
num_animals_sand_inter <- ncol(NW_sand_inter)  # number of columns
print(paste0("sand_initial # rows ", num_plants_sand_inter))
print(paste0("sand_initial # columns ", num_animals_sand_inter))
RND_sand_inter  <- remove_plants(NW_sand_inter, iter, removal_strategy)
save(RND_sand_inter,file = paste0(path_to_networks_data, "RND_sand_inter.RData"))
#
NW_sand_adv <- incidence_matrix_from_raw_data(data_sand_adv) %>% as.data.frame(.)
num_plants_sand_adv <- nrow(NW_sand_adv)   # number of rows
num_animals_sand_adv <- ncol(NW_sand_adv)  # number of columns
print(paste0("sand_initial # rows ", num_plants_sand_adv))
print(paste0("sand_initial # columns ", num_animals_sand_adv))
RND_sand_adv  <- remove_plants(NW_sand_adv, iter, removal_strategy)
save(RND_sand_adv,file = paste0(path_to_networks_data, "RND_sand_adv.RData"))
# ----------- removal from least connected to most connected LTM ------------
removal_strategy = "LTM"
LTM_pristine <- remove_plants(NW_pristine, iter, removal_strategy)
save(LTM_pristine,file = paste0(path_to_networks_data, "LTM_pristine.RData"))
#
LTM_sand_ini  <- remove_plants(NW_sand_ini, iter, removal_strategy)
save(LTM_sand_ini,file = paste0(path_to_networks_data, "LTM_sand_ini.RData"))
#
LTM_sand_inter  <- remove_plants(NW_sand_inter, iter, removal_strategy)
save(LTM_sand_inter,file = paste0(path_to_networks_data, "LTM_sand_inter.RData"))
#
LTM_sand_adv  <- remove_plants(NW_sand_adv, iter, removal_strategy)
save(LTM_sand_adv,file = paste0(path_to_networks_data, "LTM_sand_adv.RData"))
# ----------- removal from most connected to least connected MTL ------------
removal_strategy = "MTL"
MTL_pristine <- remove_plants(NW_pristine, iter, removal_strategy)
save(MTL_pristine,file = paste0(path_to_networks_data, "MTL_pristine.RData"))
#
MTL_sand_ini  <- remove_plants(NW_sand_ini, iter, removal_strategy)
save(MTL_sand_ini,file = paste0(path_to_networks_data, "MTL_sand_ini.RData"))
#
MTL_sand_inter  <- remove_plants(NW_sand_inter, iter, removal_strategy)
save(MTL_sand_inter,file = paste0(path_to_networks_data, "MTL_sand_inter.RData"))
#
MTL_sand_adv  <- remove_plants(NW_sand_adv, iter, removal_strategy)
save(MTL_sand_adv,file = paste0(path_to_networks_data, "MTL_sand_adv.RData"))
# visualize one network
net <- bipartite_graph_from_raw_data(data_pristine)
LO <- layout_as_bipartite(net)
plot(net, vertex.label=V(net)$Name,
vertex.size=2, vertex.label.dist=12, layout=LO[,2:1],
vertex.label.degree = pi*V(net)$type,vertex.label.cex=0.8,vertex.color = rgb(0.8,0.4,0.3,0.8),vertex.label.family="Times",vertex.label.color="black",edge.color="black",main = "Pristine Network")
devtools::install_github("bascomptelab/ecological_network_tools/robustness",ref = "raw_data")
library(robustness)
devtools::install_github("bascomptelab/ecological_network_tools/transformrawdata",ref = "raw_data")
library(transformrawdata)
data_pristine <- filter_raw_data(data,"Mine_type","control") %>% filter_raw_data(.,"Stage","pristine")
dim(data_pristine)
data_pristine <- filter_raw_data(data,"Mine_type","control") %>% filter_raw_data(.,"Stage","pristine")
library(transformrawdata)
data = read.csv("Interactions_data.csv",sep = ";")
setwd("~/Documents/UZH_icloud/tutorial_project/test_Rafael")
data = read.csv("Interactions_data.csv",sep = ";")
path_to_networks_data = "./Simulation_results/"
# two filters are actually redundat in this case
data_pristine <- filter_raw_data(data,"Mine_type","control") %>% filter_raw_data(.,"Stage","pristine")
dim(data_pristine)
data_sand_ini <- filter_raw_data(data,"Mine_type","sand") %>% filter_raw_data(.,"Stage","ini")
dim(data_sand_ini)
data_sand_inter <- filter_raw_data(data,"Mine_type","sand") %>% filter_raw_data(.,"Stage","inter")
dim(data_sand_inter)
data_sand_adv <- filter_raw_data(data,"Mine_type","sand") %>% filter_raw_data(.,"Stage","adv")
dim(data_sand_adv)
# simulate removal of plants
iter = 20 # number of iterations: the order of plants removal is randomized to compute the averaged secondary extinction curve
# ----------- random removal of plants RND ------------
removal_strategy = "RND" # "LTM" "MTL"
NW_pristine <- incidence_matrix_from_raw_data(data_pristine) %>% as.data.frame(.)
num_plants_pristine <- nrow(NW_pristine)   # number of rows
num_animals_pristine <- ncol(NW_pristine)  # number of columns
print(paste0("prinstine # rows ", num_plants_pristine))
print(paste0("prinstine # columns ", num_animals_pristine))
RND_pristine <- remove_plants(NW_pristine, iter, removal_strategy)
save(RND_pristine,file = paste0(path_to_networks_data, "RND_pristine.RData"))
#
NW_sand_ini <- incidence_matrix_from_raw_data(data_sand_ini) %>% as.data.frame(.)
num_plants_sand_ini <- nrow(NW_sand_ini)   # number of rows
num_animals_sand_ini <- ncol(NW_sand_ini)  # number of columns
print(paste0("sand_initial # rows ", num_plants_sand_ini))
print(paste0("sand_initial # columns ", num_animals_sand_ini))
RND_sand_ini  <- remove_plants(NW_sand_ini, iter, removal_strategy)
save(RND_sand_ini,file = paste0(path_to_networks_data, "RND_sand_ini.RData"))
#
NW_sand_inter <- incidence_matrix_from_raw_data(data_sand_inter) %>% as.data.frame(.)
num_plants_sand_inter <- nrow(NW_sand_inter)   # number of rows
num_animals_sand_inter <- ncol(NW_sand_inter)  # number of columns
print(paste0("sand_initial # rows ", num_plants_sand_inter))
print(paste0("sand_initial # columns ", num_animals_sand_inter))
RND_sand_inter  <- remove_plants(NW_sand_inter, iter, removal_strategy)
save(RND_sand_inter,file = paste0(path_to_networks_data, "RND_sand_inter.RData"))
#
NW_sand_adv <- incidence_matrix_from_raw_data(data_sand_adv) %>% as.data.frame(.)
num_plants_sand_adv <- nrow(NW_sand_adv)   # number of rows
num_animals_sand_adv <- ncol(NW_sand_adv)  # number of columns
print(paste0("sand_initial # rows ", num_plants_sand_adv))
print(paste0("sand_initial # columns ", num_animals_sand_adv))
RND_sand_adv  <- remove_plants(NW_sand_adv, iter, removal_strategy)
save(RND_sand_adv,file = paste0(path_to_networks_data, "RND_sand_adv.RData"))
# ----------- removal from least connected to most connected LTM ------------
removal_strategy = "LTM"
LTM_pristine <- remove_plants(NW_pristine, iter, removal_strategy)
save(LTM_pristine,file = paste0(path_to_networks_data, "LTM_pristine.RData"))
#
LTM_sand_ini  <- remove_plants(NW_sand_ini, iter, removal_strategy)
save(LTM_sand_ini,file = paste0(path_to_networks_data, "LTM_sand_ini.RData"))
#
LTM_sand_inter  <- remove_plants(NW_sand_inter, iter, removal_strategy)
save(LTM_sand_inter,file = paste0(path_to_networks_data, "LTM_sand_inter.RData"))
#
LTM_sand_adv  <- remove_plants(NW_sand_adv, iter, removal_strategy)
save(LTM_sand_adv,file = paste0(path_to_networks_data, "LTM_sand_adv.RData"))
# ----------- removal from most connected to least connected MTL ------------
removal_strategy = "MTL"
MTL_pristine <- remove_plants(NW_pristine, iter, removal_strategy)
save(MTL_pristine,file = paste0(path_to_networks_data, "MTL_pristine.RData"))
#
MTL_sand_ini  <- remove_plants(NW_sand_ini, iter, removal_strategy)
save(MTL_sand_ini,file = paste0(path_to_networks_data, "MTL_sand_ini.RData"))
#
MTL_sand_inter  <- remove_plants(NW_sand_inter, iter, removal_strategy)
save(MTL_sand_inter,file = paste0(path_to_networks_data, "MTL_sand_inter.RData"))
#
MTL_sand_adv  <- remove_plants(NW_sand_adv, iter, removal_strategy)
save(MTL_sand_adv,file = paste0(path_to_networks_data, "MTL_sand_adv.RData"))
# visualize one network
net <- bipartite_graph_from_raw_data(data_pristine)
LO <- layout_as_bipartite(net)
plot(net, vertex.label=V(net)$Name,
vertex.size=2, vertex.label.dist=12, layout=LO[,2:1],
vertex.label.degree = pi*V(net)$type,vertex.label.cex=0.8,vertex.color = rgb(0.8,0.4,0.3,0.8),vertex.label.family="Times",vertex.label.color="black",edge.color="black",main = "Pristine Network")
plot(net, vertex.label=V(net)$Name,
vertex.size=2, vertex.label.dist=12, layout=LO[,2:1],
vertex.label.degree = pi*V(net)$type,vertex.label.cex=0.8,vertex.color = rgb(0.8,0.4,0.3,0.8),vertex.label.family="Times",vertex.label.color="black",edge.color="black",main = "Pristine Network")
#require(shinythemes)
pacman::p_load("plyr","tidyverse", "cowplot", "bipartite", "devtools", "jsonlite", "data.table", "assertthat","plotly")
# Matt
devtools::install_github("mabarbour/weboflife", force=TRUE) # already installed
# get metadata for each network, including latitude, longitude, and nonrarefied number of species, links, and connectance
all_network_info <- get_network_info(interaction_type = "all", data_type = "all")
# let's look at our networks
all_network_info
all_networks <- get_networks(interaction_type = "all", data_type = "all")
devtools::install_github("mabarbour/weboflife", force=TRUE) # already installed
all_networks <- get_networks(interaction_type = "all", data_type = "all")
